# The container definition we want to use for developing our app
box:
  id: golang

# Defining the dev pipeline
dev:
  steps:
    - setup-go-workspace:
        package-dir: github.com/leeningli/pipeline
        
#    - script:
#        name: env
#        code: env
#    - script:
#        name: go get
#        code: |
#          cd $WERCKER_SOURCE_DIR
#          go version
#          go get -u github.com/leeningli/goscp
#          export PATH=$WERCKER_SOURCE_DIR/bin:$PATH
#          glide install
    - internal/watch:
        code: go run main.go
        reload: true

build:
  steps:
    - setup-go-workspace:
      package-dir: github.com/leeningli/pipeline
    
    - script:
        name: env
        code: |
          cd $WERCKER_SOURCE_DIR
          go version
          #go get -u github.com/Masterminds/glide
          export PATH=$WERCKER_SOURCE_DIR/bin:$PATH
          #glide install

    #- wercker/golint

    - script:
        name: go build
        code: |
          go build -o hello main.go

    - script:
        name: go test
        code: |
          go test ./...
          #go test -v $(glide novendor)

    - script:
        name: copy file to wercker output
        code: |
          cp -R ./ /pipeline/source

#    - internal/docker-push:
#        username: $DOCKER_USERNAME
#        password: $DOCKER_PASSWORD
#        cmd: /bin/bash -c "cd /pipeline/source;./hello"
#        tag: v3
#        repository: leeing227/hello

deploy:
  steps:
    - internal/docker-push:
        username: $DOCKER_USERNAME
        password: $DOCKER_PASSWORD
        cmd: /bin/bash -c "cd /pipeline/source;./hello"
        tag: v4
        repository: leeing227/hello
        #registry: https://registry.hub.docker.com